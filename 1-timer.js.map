{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst button = document.querySelector('button[data-start]')\nconst input = document.getElementById('datetime-picker')\nconst daysEL = document.querySelector('[data-days]')\nconst hoursEL = document.querySelector('[data-hours]')\nconst minutesEL = document.querySelector('[data-minutes]')\nconst secondsEL= document.querySelector('[data-seconds]')\n\nlet userSelectedDate = null;\nbutton.disabled = true;\n\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const validDate = selectedDates[0] - Date.now();\n        if (validDate < 0) {\n            button.disabled = true;\n\n            iziToast.error({\n                message: 'Please choose a date in the future',\n                color: 'red',\n                position: 'topRight',\n            }); \n        } else {\n            button.disabled = false;\n            userSelectedDate = selectedDates[0];\n            iziToast.hide({});\n        }\n    },\n  };\nflatpickr('#datetime-picker', options);\n  \nbutton.addEventListener(\"click\", () => {\ninput.disabled = true;\nbutton.disabled = true;\n\n    const interId = setInterval(() => {\n        const time = userSelectedDate - Date.now();\n        const { days, hours, minutes, seconds } = convertMs(time);\n\n        if (time < 0) {\n            clearInterval(interId);\n            input.disabled = false;\n            return;\n        }\n        daysEL.innerHTML = days;\n        hoursEL.innerHTML = hours;\n        minutesEL.innerHTML = minutes;\n        secondsEL.innerHTML = seconds;\n    }, 1000);\n})\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    const days = Pad(Math.floor(ms / day));\n    const hours = Pad(Math.floor((ms % day) / hour));\n    const minutes = Pad(Math.floor(((ms % day) % hour) / minute));\n    const seconds = Pad(Math.floor((((ms % day) % hour) % minute) / second));\n    return { days, hours, minutes, seconds };\n  }\n  \n  function Pad(n) {\n    return String(n).padStart(2, '0');\n  }\n"],"names":["button","input","daysEL","hoursEL","minutesEL","secondsEL","userSelectedDate","options","selectedDates","iziToast","flatpickr","interId","time","days","hours","minutes","seconds","convertMs","ms","Pad","n"],"mappings":"qIAKA,MAAMA,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAQ,SAAS,eAAe,iBAAiB,EACjDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAW,SAAS,cAAc,gBAAgB,EAExD,IAAIC,EAAmB,KACvBN,EAAO,SAAW,GAGlB,MAAMO,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACDA,EAAc,CAAC,EAAI,KAAK,IAAG,EAC7B,GACZR,EAAO,SAAW,GAElBS,EAAS,MAAM,CACX,QAAS,qCACT,MAAO,MACP,SAAU,UAC1B,CAAa,IAEDT,EAAO,SAAW,GAClBM,EAAmBE,EAAc,CAAC,EAClCC,EAAS,KAAK,CAAA,CAAE,EAEvB,CACL,EACAC,EAAU,mBAAoBH,CAAO,EAErCP,EAAO,iBAAiB,QAAS,IAAM,CACvCC,EAAM,SAAW,GACjBD,EAAO,SAAW,GAEd,MAAMW,EAAU,YAAY,IAAM,CAC9B,MAAMC,EAAON,EAAmB,KAAK,IAAG,EAClC,CAAE,KAAAO,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EAExD,GAAIA,EAAO,EAAG,CACV,cAAcD,CAAO,EACrBV,EAAM,SAAW,GACjB,MACH,CACDC,EAAO,UAAYW,EACnBV,EAAQ,UAAYW,EACpBV,EAAU,UAAYW,EACtBV,EAAU,UAAYW,CACzB,EAAE,GAAI,CACX,CAAC,EACD,SAASC,EAAUC,EAAI,CAMnB,MAAML,EAAOM,EAAI,KAAK,MAAMD,EAAK,KAAG,CAAC,EAC/BJ,EAAQK,EAAI,KAAK,MAAOD,EAAK,MAAO,IAAI,CAAC,EACzCH,EAAUI,EAAI,KAAK,MAAQD,EAAK,MAAO,KAAQ,GAAM,CAAC,EACtDF,EAAUG,EAAI,KAAK,MAASD,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EACvE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASG,EAAIC,EAAG,CACd,OAAO,OAAOA,CAAC,EAAE,SAAS,EAAG,GAAG,CACpC"}